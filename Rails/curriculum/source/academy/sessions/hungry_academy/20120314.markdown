---
layout: page
title: Wednesday 3/14/12 Sessions
---

### Housekeeping

* Calendar recap
* Lighting talks - are you worth $100?
* Open Source work plans, future
* Tuesdays, Thursdays
* Snacks, Food, etc
* Mailing list(s)?
* Bar power cord
* A/V equipment
* Jeff out this afternoon

## Understanding and Debugging Ruby

As a developer you spend some small fraction of your time writing code, the rest of it is spent understanding what's already been written and debugging. Today we're going to go through a few techniques to make that easier.

### Reading Error Messages

Ruby tries to help you out. Let's intentionally create a few errors and breakdown the issues in a pairing exercise.

### Outputting Text

The most common way of debugging Ruby is to output text. We have a tutorial on the topic from a Rails perspective here:

http://tutorials.jumpstartlab.com/topics/debugging/outputting_text.html

But for pure Ruby, let's talk about:

* `puts`
* `warn`
* customizing `warn`
* `raise`

### Creating a Logger

Those approaches all involve outputting text in the middle of your display, which can be distracting and difficult to read. It also doesn't provide a historical record.

How could we send messages to a log file in the background? Let's try building a customized logger for our application.

API Reference: http://www.ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html


### The Debugger

We have a Rails-centric tutorial on the debugger here:

http://tutorials.jumpstartlab.com/topics/debugging/debugger.html

Let's practice:

* installing the debugger: `gem install debug-19`
* walking through execution
* using the core instructions
  * `continue`
  * `step`
  * `next`
  * `list`
  * `display`
* tracing execution with your project

### Code Quality

#### Cane Gem

On Thursday you'll evaluate each other's code with the help of the Cane gem. Let's try it out:

```
gem install cane
```

Then from your project directory:

```
cane --style-glob '**/*.rb' --abc-glob '**/*.rb'
```

Try fixing some of the issues it highlights. If your lines are too long, break them into variables or small method calls.

#### Delete a key class

From your project directory, make sure you've got everything currently checked into a git repo.

Then delete one of the key files in your project. I'll recommend the `Attendee` class.

How could you re-imagine it? Can you reconstruct the system to a working state using a dramatically different structure? If you used `OpenStruct`, rebuild it with normal attributes. Think about smaller methods. Pull code in or push it out to other classes.

#### Obeject Decomposition

Matt is going to the model object decomposition process.